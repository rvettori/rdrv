c
Contact.table_name
Contact.name
 Segment.where(target: Contact.name)
c
quit
Segment.count
 @segment.save
 @segment.valid?
@segment
c
n
Contact.attr
Contact.attributes
Contact
var local
var loca
help var
var @q
source @q
show @q
method
list
ls  @q
dir @q
@q.class
@q
@
c
n
quit
builder
fields = f.send("#{type}_fields", new_object, child_index: id){|builder| type.to_s + "_fields"}
fields
id = "new_#{type}"
new_object = f.object.send "build_#{type}"
type
c
f.predicate_select
f.attribute_fields {|a| a.attribute_select}
f.attribute_fields do |a|
c
f.attribute_fields {|a| a.attribute_select}
f.attribute_fields {|a| a.attribute_select_associations}
f.attribute_fields {|a| }
f.attribute_fields
f
c
@zipcode
@zipcodew
c
@zipcode.errors
@zipcode.valid?
@zipcode.valid!
@zipcode
Zipcode.all
Zipcode.zll
 @zipcode = Zipcode.new(zipcode_params)
zipcode_params
c
continue
quit
params
zipcode_params
c
contact.errors
contact
contact.erros
contact.errros
contact.erros
contact.valid?
contact.email
next
c
continue
contact.errors.messages[:born_at]
contact.valid?
contact.born_at
next
continue
quit
contact.born_at
contact.errors.messages[:born_at]
next
contact.errors.messages[:born_at]
contact.errors.messages.born_at
contact.errors.messages
contact.errors
contact.valid?
contact
